package zzl.bestidear.mdgameguide;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Timer;
import java.util.TimerTask;

import android.app.Fragment;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.hardware.usb.UsbConfiguration;
import android.hardware.usb.UsbConstants;
import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbManager;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.LinearInterpolator;
import android.view.animation.ScaleAnimation;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

public class HandFragment extends Fragment {

	private static final String DEVICE_NAME = "Bluetooth Gamepad";
	private static final String DEVICE_NAME_NEW = "MGA_XY13264";
	private static final String DEVICE_NAME_NEW_2 = "Ä§µ°ÊÖ±ú";
	private static final String DEVICE_NAME_NEW_3 = "Modan_gamepad";
	//private static final String DEVICE_NAME = "YK BT RCU";
	
	private View view;
	private BluetoothAdapter bluetoothAdapter;
	private IntentFilter intentFilter;
	private ImageView imageView_home;
	private ImageView imageView_home_line;
	private ImageView imageView_line;
	private TextView textView_noti;
	private TextView textView_hand;
	private ImageView imageView_arrow;
	private Button button_jump;
	
	private boolean NODEVICE_FLAG = false;
	private boolean USB_FLAG = false;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		view = inflater.inflate(R.layout.hand, container, false);
		imageView_home = (ImageView)view.findViewById(R.id.image_home);
		imageView_home_line = (ImageView)view.findViewById(R.id.image_home_line);
		imageView_home.startAnimation(getAlphaAnimatin(300));
		
		imageView_line = (ImageView)view.findViewById(R.id.imageview_line);
		
		textView_noti = (TextView)view.findViewById(R.id.textview_noti);
		
		textView_hand = (TextView)view.findViewById(R.id.textview_hand_title);
		imageView_arrow = (ImageView)view.findViewById(R.id.imageView_arrow);
		
		button_jump = (Button)view.findViewById(R.id.button_hand_jump);
		
		button_jump.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				
				if (bluetoothAdapter.isDiscovering()) {
		        	bluetoothAdapter.cancelDiscovery();
		        }
				
				((MainActivity) getActivity())
				.getHandler()
				.obtainMessage(
						MainActivity.HANDLE_HAND_FRAGMENT_DISMISS)
				.sendToTarget();
			}
		});
				
		return view;
	}
	
	public void setHandJumpButtonVisible(boolean flag){
		
			if(flag){
				if(isHaveUsbDevice()){
					
					button_jump.setVisibility(View.VISIBLE);
					USB_FLAG = true;
					
					button_jump.setFocusable(true);
					button_jump.requestFocus();
					button_jump.setFocusableInTouchMode(true);
					
				}
			}
			else {
				if(USB_FLAG){
					button_jump.setVisibility(View.GONE);
					USB_FLAG = false;
				}
			}
			
			button_jump.setFocusable(true);
			button_jump.requestFocus();
			button_jump.setFocusableInTouchMode(true);

	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();

		intentFilter = new IntentFilter();
		intentFilter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
		intentFilter.addAction(BluetoothDevice.ACTION_FOUND);
		
		getActivity().registerReceiver(mReceiver, intentFilter);

		super.onActivityCreated(savedInstanceState);
	}
	
	private Animation getAlphaAnimatin(int time){
		
		Animation alphaAnimation = new AlphaAnimation( 1, 0 );
        alphaAnimation.setDuration( time );
        alphaAnimation.setInterpolator( new LinearInterpolator( ) );
        alphaAnimation.setRepeatCount( Animation.INFINITE );
        alphaAnimation.setRepeatMode( Animation.REVERSE );
        return alphaAnimation;
	}
	
	private Animation getScaleAnimation(int time){
		
		Animation scaleAnimation = new ScaleAnimation(1.0f, 1.1f,1.0f,1.1f);  
		scaleAnimation.setDuration(time);
		scaleAnimation.setInterpolator(new AccelerateDecelerateInterpolator());
		scaleAnimation.setRepeatCount(Animation.INFINITE);
		scaleAnimation.setRepeatMode(Animation.REVERSE);
		return scaleAnimation;
	}

	public void startProblemAnimation(){
		
		imageView_line.startAnimation(getAlphaAnimatin(500));
		textView_noti.startAnimation(getScaleAnimation(7000));
	}
	
	public void stopAnimation(){
		imageView_home.clearAnimation();
		imageView_line.clearAnimation();
		textView_noti.clearAnimation();
	}
	
	public void setConnectSuccess(){
		
		textView_noti.setVisibility(View.GONE);
		imageView_arrow.setVisibility(View.VISIBLE);
		textView_hand.setText(R.string.hand_success);
		imageView_home.setVisibility(View.GONE);
		imageView_home_line.setVisibility(View.GONE);
		
	}
	
	@Override
	public void onDestroy() {
		// TODO Auto-generated method stub
		if (bluetoothAdapter.isDiscovering()) {
        	bluetoothAdapter.cancelDiscovery();
        }
		getActivity().unregisterReceiver(mReceiver);
		super.onDestroy();
	}
	
	

	public void startBluetoothDiscovery() {
			
		NODEVICE_FLAG = false;
		if (bluetoothAdapter != null)
			bluetoothAdapter.startDiscovery();
	}
	
	private boolean isHaveUsbDevice(){
		
		UsbManager manager = (UsbManager) getActivity().getSystemService(Context.USB_SERVICE);
		HashMap<String, UsbDevice> deviceList = manager.getDeviceList();
		Iterator<UsbDevice> deviceIterator = deviceList.values().iterator();
		boolean flag = false;
		while(deviceIterator.hasNext()){
		    UsbDevice device = deviceIterator.next();
		    int vendorId = device.getVendorId(); 
		    int productIt = device.getProductId();
		    //if(vendorId ==1035 && productIt != -1)
		    //if(vendorId !=7531 && productIt != -1)
		    //if(device.getDeviceClass() == UsbConstants.USB_CLASS_HID)
		    for(int i = 0 ;i < device.getInterfaceCount();i++)
		    {
		    	Log.d("zzl:::","+++++++++++++++++%%%%%%%%%%%%%%%::::"+"vendor::"+vendorId+" "+"product::"+productIt+" "+"class::"+device.getInterface(i).getInterfaceClass());
		    	if(device.getInterface(i).getInterfaceClass() == UsbConstants.USB_CLASS_HID || device.getInterface(i).getInterfaceClass() == UsbConstants. USB_CLASS_VENDOR_SPEC )
		    		flag = true;

		    }
		}
		return flag;
	}

	// this is new add function
	public void setEnterIsHaveUsb(){
		
		setHandJumpButtonVisible(isHaveUsbDevice());
	}
	
	public void setHandFragmentHide() {

		if (bluetoothAdapter.isDiscovering()) {
        	bluetoothAdapter.cancelDiscovery();
        }
		TimerTask timerTask = new TimerTask() {

			@Override
			public void run() {
				// TODO Auto-generated method stub
				((MainActivity) getActivity())
						.getHandler()
						.obtainMessage(
								MainActivity.HANDLE_HAND_FRAGMENT_DISMISS)
						.sendToTarget();

			}
		};
		Timer timer = new Timer();
		timer.schedule(timerTask, 2000);
	}

	public void setHandFragmentHideNotDelay() {

		if (bluetoothAdapter.isDiscovering()) {
        	bluetoothAdapter.cancelDiscovery();
        }
		
				((MainActivity) getActivity())
						.getHandler()
						.obtainMessage(
								MainActivity.HANDLE_HAND_FRAGMENT_DISMISS)
						.sendToTarget();

	}
	
	BroadcastReceiver mReceiver = new BroadcastReceiver() {
		@Override
		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();
		   // final BluetoothDevice device ;
			// When discovery finds a device
			if (BluetoothDevice.ACTION_FOUND.equals(action)) {
				// Get the BluetoothDevice object from the Intent
				final BluetoothDevice device = intent
						.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
				// If it's already paired, skip it, because it's been listed
				// already
				if(device != null){
					String name = device.getName();
					if ( name != null && device.getBondState() != BluetoothDevice.BOND_BONDED && (name.equals(DEVICE_NAME)||name.equals(DEVICE_NAME_NEW)||name.equals(DEVICE_NAME_NEW_2)||name.equals(DEVICE_NAME_NEW_3))) {
					        Toast.makeText(getActivity(), name, Toast.LENGTH_SHORT).show();
					        
					        NODEVICE_FLAG = true;
					        
					        if (bluetoothAdapter.isDiscovering()) {
					        	bluetoothAdapter.cancelDiscovery();
					        }
					        TimerTask timerTask = new TimerTask() {
								
								@Override
								public void run() {
									// TODO Auto-generated method stub
							        device.createBond();
								}
							};
							Timer timer = new Timer();
							timer.schedule(timerTask, 5000);
					}
				}
				// When discovery is finished, change the Activity title
			} else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED
					.equals(action)) {
				if(!NODEVICE_FLAG){
					startBluetoothDiscovery();
					NODEVICE_FLAG = false;
				}

			}
		}
	};

}
